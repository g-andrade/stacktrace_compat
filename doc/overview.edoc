@title stacktrace_compat
@doc

<a target="_parent" href="https://hex.pm/packages/stacktrace_compat" alt="Hex.pm Package">
    <img src="https://img.shields.io/hexpm/v/stacktrace_compat.svg?style=flat"/></a>
<a target="_parent" href="https://github.com/g-andrade/stacktrace_compat/actions?query=workflow%3Abuild" alt="Travis CI Build Status">
    <img src="https://github.com/g-andrade/stacktrace_compat/workflows/build/badge.svg"/></a>

`stacktrace_compat' is a workaround for the deprecation of `:get_stacktrace()' in Erlang/OTP 21.

It intends on smoothing near-future maintenance of projects that are to support both
pre- and post-deprecation code by avoiding code duplication or ungainly macros.

<h4>Getting Started</h4>

<h5>1. Import as dependency</h5>

rebar.config:

<pre lang="erlang" class="erlang">
{deps,
 [% [...]
  {stacktrace_compat, "1.2.1"}
 ]}.
</pre>

<h5>2. Apply transform when compiling modules</h5>

rebar.config:

<pre lang="erlang" class="erlang">
{erl_opts,
 [% [...]
  {parse_transform, stacktrace_transform}
 ]}.
</pre>

<h4>Example Transformation</h4>

The following snippet:

<pre lang="erlang" class="erlang">
foobar() ->
    try
        1 / (rand:uniform(2) - 1)
    catch
        error:badarith ->
            {error, {badarith, erlang:get_stacktrace()}}
    end.
</pre>

...would be transformed into:

<pre lang="erlang" class="erlang">
foobar() ->
    try
        1 / (rand:uniform(2) - 1)
    catch
        error:badarith:StacktraceCompat444353487_1 ->
            {error, {badarith, StacktraceCompat444353487_1}}
    end.
</pre>

<h4>Tested setup</h4>

<ul>
<li>Erlang/OTP 19 or higher</li>
<li>rebar3</li>
</ul>

<h4>Details</h4>

`stacktrace_compat' defines a parse transform (`stacktrace_transform') which, when
applied to modules on OTP 21+, will replace `erlang:get_stacktrace()' calls with instances
of the stacktrace binding that is to be captured on the closest catch pattern up the abstract syntax
tree (within the same named function.)

If no binding has been defined, a generated name will be used that's likely to be conflict free.

If no catch pattern is found, no replacement is made. This makes sense in naked calls to
`erlang:get_stacktrace()' (they're a no-no anyway) but not in calls from within exception helpers,
i.e. code that grabs the stacktrace from within a function which is not the same as the one from
which the exception had been thrown - it's a limitation yet to be worked out (if at all.)

@end
